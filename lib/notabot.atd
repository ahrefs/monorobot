(* This is the description of the configuration of the program *)

(* this is used to describe where to post a message after processing a
   payload from github. It is the destination. *)
type webhook = {
  url : string; (* url to call to send the message *)
  channel : string; (* name of the channel where the message will be posted *)
}

(* This type of rule is used for events that must be routed based on the
  files they are related to.

  For each file listed in the payload, all the prefixes that are listed in
  prefix and ignore will be tested. If a file matches a prefix and no ignore,
  then the whole rule matches the payload and can be used.

  If a commit affects 3 files:
  - some/dir/a
  - some/dir/b
  - some/other/dir/c

  And we are only interested by commits affecting files in some/dir

  prefix should be ["some/dir"]

  or

  ignore should be ["some/other"]

  The rule is considered matched if there is at least one file in commit that
  matches one of the [prefix] and does not match any of [ignore] *)
type prefix_rule = {
  prefix : string list; (* empty list means match any *)
  ~ignore : string list;
  chan : string;
}

type label_rule = {
  label_name : string list;
  ~ignore : string list;
  chan: string;
}

type prefix_config = {
  ?default: string nullable; (* if none of the rules is matching *)
  rules: prefix_rule list;
}

type label_config = {
  ?default: string nullable; (* if none of the rules is matching *)
  rules: label_rule list;
}

type status_state = {
  success: bool;
  failure: bool;
  pending: bool;
  error: bool;
}

type status_config = {
  ?title: string list option; (* keep only status events with a title matching this list *)
  status: status_state;
  ?suppress_cancelled_events : bool option; (* suppresses status cancelled events; if not specified - true *)
  ?suppress_consecutive_success : bool option; (* suppresses status success on branches whose last build branch state is also success; if not specified - true *)
}

type config = {
  prefix_rules : prefix_config;
  label_rules : label_config;
  status_rules : status_config;
  ?main_branch_name: string option; (* used to filter out notifications about merges of main branch into other branches *)
  ?offline: string option; (* where to find github api data when http calls are not allowed; used for testing *)
}

type secrets = {
  slack_channels : webhook list;
  ?gh_token: string option; (* must not be specified for public repositories *)
  ?gh_webhook_secret: string option; (* if not specified - signatures will not be checked *)
}

type build_state = [
  | Success
  | Failure
] <ocaml repr="classic">

type branch_info = {
  last_build_state : build_state; (* if unknown or not built before, set to 'Failure' *)
  updated_at : string;
}

type state = {
  branches : (string * branch_info) list;
}
