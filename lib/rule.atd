type regex = string wrap <ocaml module="Common.Re2">

(* Text fields from the GitHub payload that can be used in a condition *)
type comparable_field = [
| Context <json name="context">
| Description <json name="description">
| Target_url <json name="target_url">
] <ocaml repr="classic">

(* Checks whether a payload field matches the provided regex pattern *)
type match_condition = {
  field : comparable_field;
  re : regex;
}

(* Specifies additional conditions the payload must meet for the status rule to match *)
type status_condition = [
| Match <json name="match"> of match_condition
| All_of <json name="all_of"> of status_condition list (* match all conditions in list *)
| One_of <json name="one_of"> of status_condition list (* match at least one condition in list *)
| Not <json name="not"> of status_condition (* don't match the sub-condition *)
] <ocaml repr="classic"> <json adapter.ocaml="Atdgen_runtime.Json_adapter.One_field">

(* Filtering options; allow_once matches if the last matched status differs
  from the current one *)
type status_policy = [
| Allow <json name="allow">
| Allow_once <json name="allow_once">
| Ignore <json name="ignore">
] <ocaml repr="classic"> <json adapter.ocaml="Atdgen_runtime.Json_adapter.One_field">

type build_status <ocaml from="Github" t="status_state"> = abstract

(* A status matches a status rule with the policy with the build status is in
   the list, and the condition is true.

   The default behavior for each status state is:
   - pending: ignore
   - failure: allow
   - error: allow
   - success: allow_once
*)
type status_rule = {
  trigger <json name="on"> : build_status list;
  ?condition <json name="when"> : status_condition nullable;
  policy : status_policy;
}

(* A filename matches a prefix rule with the channel name if it isn't in the ignore
   list and it is in the allow list. If multiple prefix rules match for a given
   file, the one to match with the longest prefix is used. Both [allow] and
   [ignore] are optional. If [allow] is undefined, then the rule matches all
   payloads.

   If a commit affects 3 files:
   - some/dir/a
   - some/dir/b
   - some/other/dir/c

   And we are only interested by commits affecting files in some/dir

   allow should be ["some/dir"]

   or

   ignore should be ["some/other"] 
*)
type prefix_rule = {
  ?allow <json name="match"> : string list nullable;
  ?ignore : string list nullable;
  ?branch_filters : string list nullable;
  channel_name <json name="channel"> : string;
} <json adapter.ocaml="Atd_adapters.Branch_filters_adapter">

(* A payload matches a label rule with a channel name if absent from the ignore list
   and present in the allow list. Both [allow] and [ignore] are optional. If [allow]
   is undefined, then the rule matches all payloads. *)
type label_rule = {
  ?allow <json name="match"> : string list nullable;
  ?ignore : string list nullable;
  channel_name <json name="channel"> : string;
}