type status_state <ocaml from="Github"> = abstract
type 'v map_as_object <ocaml from="Common"> = abstract
type 'v int_map_as_object <ocaml from="Common"> = abstract
type 'v table_as_object <ocaml from="Common"> = abstract
type string_set <ocaml from="Common"> = abstract
type timestamp = string wrap <ocaml t="Common.Slack_timestamp.t" wrap="Common.Slack_timestamp.inject" unwrap="Common.Slack_timestamp.project">
type user_id = string wrap <ocaml t="Common.Slack_user_id.t" wrap="Common.Slack_user_id.inject" unwrap="Common.Slack_user_id.project">
type channel_id = string wrap <ocaml t="Common.Slack_channel.Ident.t" wrap="Common.Slack_channel.Ident.inject" unwrap="Common.Slack_channel.Ident.project">
type any_channel = string wrap <ocaml t="Common.Slack_channel.Any.t" wrap="Common.Slack_channel.Any.inject" unwrap="Common.Slack_channel.Any.project">

type ci_commit = {
  sha: string;
  author: string;
  commit_message: string;
}

type failed_step = {
  name: string;
  build_url: string;
}

type build_status = {
  status: status_state;
  build_number: int;
  build_url: string;
  commit: ci_commit;
  is_finished: bool;
  failed_steps: failed_step list;
  created_at: string;
  finished_at: string nullable;
}

(* A map from builds numbers to build statuses *)
type build_statuses = build_status int_map_as_object

(* A map from branch names to [build_statuses] maps *)
type branch_statuses = build_statuses map_as_object

(* A map from pipeline names to [branch_statuses] maps.
   This tracks the last build state matched by the status_rules for each pipeline and branch *)
type pipeline_statuses = branch_statuses map_as_object

type commit_sets = {
  s1: string_set;
  s2: string_set;
}

(* A map from pipeline names to a set of commits. This tracks the commits
   that have triggered a direct message notification. *)
type pipeline_commits = commit_sets map_as_object

type slack_thread = {
  ts: timestamp;
  channel: any_channel;
  cid: channel_id;
}

type slack_threads = slack_thread list map_as_object

(* The runtime state of a given GitHub repository *)
type repo_state = {
  ~pipeline_statuses <ocaml mutable default="Common.StringMap.empty">: pipeline_statuses;
  ~pipeline_commits <ocaml mutable default="Common.StringMap.empty">: pipeline_commits;
  ~slack_threads <ocaml mutable default="Common.StringMap.empty">: slack_threads;
}

(* The serializable runtime state of the bot *)
type state = {
  repos : repo_state table_as_object;
  ?bot_user_id <ocaml mutable>: user_id nullable;
}
