type status_state <ocaml from="Github"> = abstract
type 'v map_as_object <ocaml from="Common"> = abstract
type 'v table_as_object <ocaml from="Common"> = abstract
type string_set <ocaml from="Common"> = abstract
type post_message_res <ocaml from="Slack"> = {
  channel: string;
  ts: string;
}

type ci_commit = {
  sha: string;
  author: string;
  commit_message: string;
  build_link: string option;
  last_updated: string;
}

type build_status = {
  status: status_state;
  ?original_failed_commit:ci_commit nullable;
  ?current_failed_commit:ci_commit nullable;
}

(* A map from branch names to build statuses *)
type branch_statuses = build_status map_as_object

(* A map from pipeline names to [branch_statuses] maps. This tracks the
   last build state matched by the status_rules for each pipeline and
   branch *)
type pipeline_statuses = branch_statuses map_as_object

type commit_sets = {
  s1: string_set;
  s2: string_set;
}

(* A map from pipeline names to a set of commits. This tracks the commits
   that have triggered a direct message notification. *)
type pipeline_commits = commit_sets map_as_object

type slack_thread = {
  inherit post_message_res;
  cid: string;
}

type slack_threads = slack_thread list map_as_object

(* The runtime state of a given GitHub repository *)
type repo_state = {
  pipeline_statuses <ocaml mutable>: pipeline_statuses;
  pipeline_commits <ocaml mutable>: pipeline_commits;
  slack_threads <ocaml mutable>: slack_threads;
}

(* The serializable runtime state of the bot *)
type state = {
  repos : repo_state table_as_object;
  ?bot_user_id <ocaml mutable>: string nullable;
}
