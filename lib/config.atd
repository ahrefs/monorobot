type status_rule <ocaml from="Rule"> = abstract
type prefix_rule <ocaml from="Rule"> = abstract
type label_rule <ocaml from="Rule"> = abstract
type project_owners_rule <ocaml from="Rule"> = abstract
type any_channel = string wrap <ocaml t="Common.Slack_channel.Any.t" wrap="Common.Slack_channel.Any.inject" unwrap="Common.Slack_channel.Any.project">
type channel_name = string wrap <ocaml t="Common.Slack_channel.Name.t" wrap="Common.Slack_channel.Name.inject" unwrap="Common.Slack_channel.Name.project">

type pipeline = {
  name: string;
  ?failed_builds_channel: channel_name nullable;
  ~notify_canceled_builds <ocaml default="true">: bool;
  ~mention_user_on_failed_builds <ocaml default="true">: bool;
  ~dm_users_on_failures <ocaml default="true">: bool;
} <json adapter.ocaml="Atd_adapters.Strings_to_pipelines_adapter">

(* This type of rule is used for CI build notifications. *)
type status_rules = {
  ?allowed_pipelines : pipeline list nullable; (* keep only status events with a title matching this list *)
  rules: status_rule list;
}

(* This type of rule is used for events that must be routed based on the
  files they are related to. *)
type prefix_rules = {
  ?default_channel: channel_name nullable; (* if none of the rules is matching *)
  ~filter_main_branch <ocaml default="false">: bool;
  rules: prefix_rule list;
}

(* This type of rule is used for PR and issue notifications. *)
type label_rules = {
  ?default_channel: channel_name nullable; (* if none of the rules is matching *)
  rules: label_rule list;
}

(* This type of rule is used for routing PR review requests to users. *)
type project_owners = {
  rules: project_owners_rule list;
}

type notifications_configs = {
  ~dm_for_failing_build <ocaml default="[]">: (string * bool) list <json repr="object">;
  ~dm_after_failed_build <ocaml default="[]">: (string * bool) list <json repr="object">
}

(* This is the structure of the repository configuration file. It should be at the
   root of the monorepo, on the main branch. *)
type config = {
  prefix_rules : prefix_rules;
  label_rules : label_rules;
  ~status_rules <ocaml default="{allowed_pipelines = Some []; rules = []}"> : status_rules;
  ~project_owners <ocaml default="{rules = []}"> : project_owners;
  ~ignored_users <ocaml default="[]">: string list; (* list of ignored users *)
  ?main_branch_name : string nullable; (* the name of the main branch; used to filter out notifications about merges of main branch into other branches *)
  ~user_mappings <ocaml default="[]">: (string * string) list <json repr="object">; (* list of github to slack profile mappings *)
  ~notifications_configs <ocaml default="{dm_after_failed_build = []; dm_for_failing_build = []}"> : notifications_configs;
  ~include_logs_in_notifs <ocaml default="true"> : bool;
  ~debug_db <ocaml default="false"> : bool;
  ?debug_db_path : string nullable;
}

(* This specifies the Slack webhook to query to post to the channel with the given name *)
type webhook = {
  url : string; (* webhook URL to post the Slack message *)
  channel : any_channel; (* name of the Slack channel to post the message *)
}

type repo_config = {
  (* Repository url. Fully qualified (include protocol), without trailing slash. e.g. https://github.com/ahrefs/monorobot *)
  url : string;
  (* GitHub personal access token, if repo access requires it *)
  ?gh_token : string nullable;
  (* GitHub webhook secret token to secure the webhook *)
  ?gh_hook_secret : string nullable;
}

(* This is the structure of the secrets file which stores sensitive information, and
   shouldn't be checked into version control.  *)
type secrets = {
  (* repo-specific secrets; overrides global values if defined for a given repo *)
  repos : repo_config list;
  (* list of Slack webhook & channel name pairs *)
  ~slack_hooks <ocaml default="[]"> : webhook list;
  (* Slack bot token (`xoxb-XXXX`), giving the bot capabilities to interact with the workspace *)
  ?slack_access_token : string nullable;
 (* Slack uses this secret to sign requests; provide to verify incoming Slack requests *)
  ?slack_signing_secret : string nullable;
  (* Buildkite access token, used to query Buildkite API for more information about builds *)
  ?buildkite_access_token : string nullable;
  (* Buildkite uses this secret to sign webhook requests; provide to verify incoming Buildkite requests *)
  ?buildkite_signing_secret : string nullable;
}
