type basic_json <ocaml module="Yojson.Basic" t="t"> = abstract

type author = {
  name: string;
  email: string;
  ?username: string option;
}

type commit_hash = string

type commit = {
  id: commit_hash;
  distinct: bool;
  message: string;
  timestamp: string;
  url: string;
  author:  author;
  committer: author;
  added: string list;
  removed: string list;
  modified: string list;
}

type user = {
  login: string;
  id: int;
}

type repository = {
  name: string;
  full_name: string;
  html_url <ocaml name="url"> : string;
  commits_url: string;
}

type commit_pushed_notification = {
 ref: string;
 created: bool;
 deleted: bool;
 forced: bool;
 after: commit_hash;
 commits: commit list;
 ?head_commit: commit option;
 repository: repository;
 compare: string;
 pusher: author;
 sender: user;
}

type label = {
  name: string;
}

type pull_request = {
  user: user;
  number: int;
  body: string;
  title: string;
  html_url: string;
  labels: label list;
}

type issue = {
  user: user;
  number: int;
  body: string;
  title: string;
  html_url: string;
  labels: label list;
  ?pull_request: basic_json nullable;
}

type pr_action = [
  Assigned <json name="assigned">
  | Unassigned <json name="unassigned">
  | Review_requested <json name="review_requested">
  | Review_request_removed <json name="review_request_removed">
  | Labeled <json name="labeled">
  | Unlabeled <json name="unlabeled">
  | Opened <json name="opened">
  | Edited <json name="edited">
  | Closed <json name="closed">
  | Ready_for_review <json name="ready_for_review">
  | Locked <json name="locked">
  | Unlocked <json name="unlocked">
  | Reopened <json name="reopened">
  | Synchronize <json name="synchronize">
] <ocaml repr="classic">

type pr_review_action = [
  Submitted <json name="submitted">
  | Dismissed <json name="dismissed">
  | Edited <json name="edited">
] <ocaml repr="classic">

type issue_action = [
  Assigned <json name="assigned">
  | Unassigned <json name="unassigned">
  | Labeled <json name="labeled">
  | Unlabeled <json name="unlabeled">
  | Opened <json name="opened">
  | Edited <json name="edited">
  | Deleted <json name="deleted">
  | Closed <json name="closed">
  | Reopened <json name="reopened">
  | Pinned <json name="pinned">
  | Unpinned <json name="unpinned">
  | Locked <json name="locked">
  | Unlocked <json name="unlocked">
  | Transferred <json name="transferred">
  | Milestoned <json name="milestoned">
  | Demilestoned <json name="demilestoned">
] <ocaml repr="classic">

type pr_notification = {
  action: pr_action;
  number: int;
  sender: user;
  pull_request: pull_request;
  repository: repository;
}

type review = {
  ?body: string nullable;
  html_url: string;
  state: string;
}

type pr_review_notification = {
  action: pr_review_action;
  sender: user;
  pull_request: pull_request;
  review: review;
  repository: repository;
}

type issue_notification = {
  action: issue_action;
  sender: user;
  issue: issue;
  repository: repository;
}

type comment_action = [
  Created <json name="created">
  | Edited <json name="edited">
  | Deleted <json name="deleted">
] <ocaml repr="classic">

type comment = {
  id: int;
  body: string;
  html_url: string;
  ?path: string nullable;
  ?commit_id: string nullable;
}

type issue_comment_notification = {
  action: comment_action;
  issue: issue;
  sender: user;
  comment: comment;
  repository: repository;
}

type pr_review_comment_notification = {
  action: comment_action;
  pull_request: pull_request;
  sender: user;
  comment: comment;
  repository: repository;
}

type status_state = [
  Success <json name="success">
  | Failure <json name="failure">
  | Pending <json name="pending">
  | Error <json name="error">
] <ocaml repr="classic">

type inner_commit = {
  author: author;
  message: string;
}

type branch = {
  name: string;
}

type status_commit = {
  sha: commit_hash;
  commit: inner_commit;
  url: string;
  author: user;
  html_url: string;
}

type status_notification = {
  sha: commit_hash;
  commit: status_commit;
  state: status_state;
  ?description: string nullable;
  ?target_url: string nullable;
  context: string;
  repository: repository;
  branches: branch list;
  updated_at: string;
}

type file = {
  sha: commit_hash;
  filename: string;
  status: string;
  additions: int;
  deletions: int;
  changes: int;
  blob_url <ocaml name="url"> : string;
}

type api_commit = {
  sha: commit_hash;
  commit: inner_commit;
  html_url <ocaml name="url"> : string;
  author: user;
  files: file list;
}

type commit_comment_notification = {
  action: string;
  repository: repository;
  comment: comment;
  sender: user;
}

type content_api_response = {
  name : string;
  path : string;
  size : int;
  encoding : string;
  content : string;
}