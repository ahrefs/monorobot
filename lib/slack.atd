type 'v map_as_object <ocaml from="Common"> = abstract

type message_field = {
  ?title: string nullable;
  value: string;
  ~short <ocaml default="false">: bool;
}

type message_attachment = {
  fallback: string nullable;
  ?mrkdwn_in: string list nullable;
  ?color: string nullable;
  ?pretext: string nullable;
  ?author_name: string nullable;
  ?author_link: string nullable;
  ?author_icon: string nullable;
  ?title: string nullable;
  ?title_link: string nullable;
  ?text: string nullable;
  ?fields: message_field list nullable;
  ?image_url: string nullable;
  ?thumb_url: string nullable;
  ?ts: int nullable;
  ?footer: string nullable;
}

type message_section_block_type = [
  Section <json name="section">
] <ocaml repr="classic">

type message_divider_block_type = [
  Divider <json name="divider">
] <ocaml repr="classic">

type text_object_type = [
  Plain_text <json name="plain_text">
  | Markdown <json name="mrkdwn">
] <ocaml repr="classic">

type text_object = {
  text_type <json name="type"> : text_object_type;
  text: string;
}

type message_text_block = {
  message_type <json name="type"> : message_section_block_type;
  text: text_object;
}

type message_divider_block = {
  message_type <json name="type"> : message_divider_block_type;
}

type message_block = [
  Text of message_text_block
  | Divider of message_divider_block
] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

type post_message_req = {
  channel: string;
  ?thread_ts: string nullable;
  ?username : string nullable;
  ?text: string nullable;
  ?attachments: message_attachment list nullable;
  ?blocks: message_block list nullable;
  ?unfurl_media : bool nullable;
  ?unfurl_links : bool nullable;
}

type post_message_res = {
  channel: string;
  ts: string;
}

type lookup_user_res = {
  user: user;
}

type profile = {
  ?email: string nullable
}

type user = {
  id: string;
  profile: profile
}

type list_users_res = {
  members: user list;
}

type link_shared_link = {
  domain: string;
  url: string;
}

type link_shared_event = {
  channel: string;
  is_bot_user_member: bool;
  user: string;
  message_ts: string;
  ?thread_ts: string option;
  links: link_shared_link list;
}

type event = [
| Link_shared <json name="link_shared"> of link_shared_event
] <ocaml repr="classic"> <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

type event_callback_notification = {
  token: string;
  team_id: string;
  api_app_id: string;
  event: event;
  event_id: string;
  event_time: int;
}

type url_verification_notification = {
  token: string;
  challenge: string;
}

type event_notification = [
| Event_callback <json name="event_callback"> of event_callback_notification
| Url_verification <json name="url_verification"> of url_verification_notification
] <ocaml repr="classic"> <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field">

type unfurl = message_attachment

type chat_unfurl_req = {
  channel: string;
  ts: string;
  unfurls: unfurl map_as_object;
}

type ok_res = {
  ok: bool;
}

type auth_test_res = {
  url: string;
  team: string;
  user: string;
  team_id: string;
  user_id: string;
}

type ('ok, 'err) http_response <ocaml predef module="Result" t="t"> = [
  | Ok of 'ok
  | Error of 'err
] <ocaml repr="classic">

type 'ok slack_response = ('ok, string) http_response
  <json adapter.ocaml="Atd_adapters.Slack_response_adapter">
