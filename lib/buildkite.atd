(* We keep this type an open enum because buildkite's documentation is not up to date and might have
   more states. It shouldn't be an issue because we don't care about all the possible states. *)
   type build_state = [
    | Blocked <json name="blocked">
    | Canceled <json name="canceled">
    | Canceling <json name="canceling">
    | Failed <json name="failed">
    | Failing <json name="failing">
    | Finished <json name="finished">
    | Not_run <json name="not_run">
    | Passed <json name="passed">
    | Running <json name="running">
    | Scheduled <json name="scheduled">
    | Skipped <json name="skipped">
    | Other of string
  ] <json open_enum> <ocaml repr="classic">


type job_state = [
  | Pending <json name="pending">
  | Waiting <json name="waiting">
  | Waiting_failed <json name="waiting_failed">
  | Blocked <json name="blocked">
  | Blocked_failed <json name="blocked_failed">
  | Unblocked <json name="unblocked">
  | Unblocked_failed <json name="unblocked_failed">
  | Limiting <json name="limiting">
  | Limited <json name="limited">
  | Scheduled <json name="scheduled">
  | Assigned <json name="assigned">
  | Accepted <json name="accepted">
  | Running <json name="running">
  | Finished <json name="finished">
  | Canceling <json name="canceling">
  | Canceled <json name="canceled">
  | Expired <json name="expired">
  | Timing_out <json name="timing_out">
  | Timed_out <json name="timed_out">
  | Skipped <json name="skipped">
  | Broken <json name="broken">
  | Passed <json name="passed">
  | Failed <json name="failed">
  | Other of string
] <json open_enum> <ocaml repr="classic">

type job_log = {
  url: string;
  content: string;
  size: int
}

type job =  {
  id : string;
  ?log_url: string option;
  name : string;
  type_ <json name="type"> : string;
  state : job_state;
  web_url : string;
}

type non_job = {
  id: string;
}

type job_type = [
  | Script <json name="script"> of job
  | Trigger <json name="trigger"> of job
  | Manual <json name="manual"> of non_job
  | Waiter <json name="waiter"> of non_job
] <json adapter.ocaml="Atdgen_runtime.Json_adapter.Type_field"> <ocaml repr="classic">

type get_build_res = {
  state: build_state;
  created_at: string;
  finished_at: string nullable;
  jobs: job_type list;
  branch: string;
}

type get_build_response = {
  number: int;
  branch: string;
  jobs: job list;
  url: string;
  (* There are more fields, but we don't need/want them for now *)
}

(* Custom type for the steps state and not a Buildkite type. We have them here
   to avoid circular dependencies with common.atd, common.ml and state.ml *)
type failed_step = {
  name: string;
  build_url: string;
}
